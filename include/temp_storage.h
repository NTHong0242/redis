#pragma once
#include "hiredis.h"

// ===========================================
// üì¶ TEMPORARY STORAGE MODULE (Redis-based)
// -------------------------------------------
// Ch·ª©c nƒÉng: L∆∞u tr·ªØ t·∫°m th·ªùi d·ªØ li·ªáu trong Redis,
// t·ª± ƒë·ªông x√≥a sau m·ªôt kho·∫£ng th·ªùi gian (TTL).
// D√πng ƒë·ªÉ m√¥ ph·ªèng cache, session, hay d·ªØ li·ªáu t·∫°m.
// ===========================================

// C·∫•u h√¨nh cho b·ªô l∆∞u tr·ªØ t·∫°m th·ªùi
typedef struct {
    const char* key;          // T√™n key trong Redis
    const char* value;        // Gi√° tr·ªã mu·ªën l∆∞u t·∫°m
    int ttl_seconds;          // Th·ªùi gian t·ªìn t·∫°i (TTL, gi√¢y)
} TempStorageConfig;

// K·∫øt qu·∫£ khi thao t√°c v·ªõi Redis
typedef struct {
    int success;              // 1 n·∫øu l∆∞u th√†nh c√¥ng, 0 n·∫øu l·ªói
    const char* message;      // M√¥ t·∫£ tr·∫°ng th√°i ho·∫∑c l·ªói
} TempStorageResult;

// -------------------------------------------
// üß© C√°c h√†m c·ªßa module temp_storage
// -------------------------------------------

// L∆∞u d·ªØ li·ªáu t·∫°m th·ªùi v√†o Redis (SET key value EX ttl)
TempStorageResult store_temporary_data(redisContext* c, TempStorageConfig config);

// ƒê·ªçc d·ªØ li·ªáu t·∫°m th·ªùi t·ª´ Redis (GET key)
TempStorageResult read_temporary_data(redisContext* c, const char* key);

// Demo l∆∞u v√† ƒë·ªçc d·ªØ li·ªáu t·∫°m th·ªùi, hi·ªÉn th·ªã tr·∫°ng th√°i TTL
void perform_temporary_storage(redisContext* c);
